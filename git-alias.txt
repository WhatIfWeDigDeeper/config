[alias]
	# first install git-extras https://github.com/tj/git-extras
  	# some aliases from http://haacked.com/archive/2014/07/28/github-flow-aliases/
	
	# navigation
	cd = checkout
	cdd = checkout develop
	cdm = checkout master
	cdt = checkout -t # upstream/branchName
	un = checkout -- # file name
	unstage = reset -- # file name
	fp = pull
	mp = !git fetch upstream && git merge upstream/$(git rev-parse --abbrev-ref HEAD 2>&1) --ff-only
	s = status -s
	sv = status -v -v
	find = grep -i -n #-c for counts
  	findf = grep -i -n -S

	# workflow
	down = "!git remote update -p; git merge --ff-only @{upstream}"
	dn = !git down
	new = checkout -b
	up = !git push -u origin $(git rev-parse --abbrev-ref HEAD 2>&1)

	# modify
	ds = diff --cached
	diffn = diff --name-only
	a = add
  	acm = commit -am
	cm = commit -m
	ca = commit --amend
	rbi = rebase -i # sha before.
	rbim = rebase -i master
	rbid = rebase -i develop
	# if merge conflict choose -m 1 to choose master
	rbm = rebase --onto master
	rbmp = pull --rebase origin master
	wip = commit -am "[WIP]"
	doc = commit -am "[DOCS] Updated documentation --skip-ci"
	choose-ours = checkout --ours .
	choose-theirs = checkout --theirs .

	# branch info
	ls = branch
	lsf = ls-files
	lsr = branch --remote
	lst = describe --tags
	lsrt = ls-remote --tags
	url = ls-remote --get-url
	last = branch -v
	rv = remote -v
  	prr = !git pr $1 upstream

	# config
	ualias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t => \\2/' | sort
	cfg = config --global -e

	# cleanup
	undo-file = checkout HEAD # file name - both stage and wd
	undo-merge = revert ^M
	clean-ignore = clean -fX
	toss = checkout -- # file name - undo wd
	unmerged = branch --no-merged
	merged = branch --merged
	del = branch -d
	delete = branch -d
	DEL = branch -D
	delr = !git push origin --delete $@
	# need to specify path, like origin/feature/xyz
	nuc = reset --hard origin
	nucm = reset --hard origin/master
	prune = fetch --prune

	cp = cherry-pick

	# delete file from staging, but not wd
	delstg = rm --cached
	rename = mv

	# logging
	l = log --graph --all --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset'
	lol = log -p --graph --all --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset'
	ll = log --stat --abbrev-commit
	lg = log --color --graph --pretty=format:'%C(bold white)%h%Creset -%C(bold green)%d%Creset %s %C(bold green)(%cr)%Creset %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
	llg = log --color --graph --pretty=format:'%C(bold white)%h %d%Creset%n%s%n%+b%C(bold blue)%an <%ae>%Creset %C(bold green)%cr (%ci)' --abbrev-commit
  	l1 = log --pretty=oneline --abbrev-commit
	lm = log --oneline --left-right HEAD...MERGE_HEAD
  	stats = show --stat
	ls-git-crypt-users = "!gitcryptusers() { cd .git-crypt/keys/default/0; for file in *.gpg; do echo \\\"${file} : \\\" && git log -- ${file} | sed -n 9p; done; cd - 1> /dev/null; }; gitcryptusers"

	# advanced plumbing
	read-sha = cat-file -p # sha1
	gcount = count-objects

	# https://github.com/nvie/gitflow/wiki/Command-Line-Arguments
	feature-start = !git flow feature start -F $@ && git flow feature publish
	feature-end = flow feature finish -FDS
	feature-end-keep = flow feature finish -Frk
	feature-publish = flow feature publish
	feature-rebase = flow feature rebase

	release-start = !git flow release start -F $@ && git flow release publish
	release-publish = flow release publish
	release-rebase = flow release rebase
	release-end = flow release finish -Fpn
	release-end-keep = flow release finish -Frk

	hotfix-start = !git flow hotfix start -F $1 && git flow hotfix publish
	hotfix-tag-start = !git checkout tags/v$1 -b v$1 && git flow hotfix start -F $1 v$1 && git flow hotfix publish
	hotfix-publish = flow hotfix publish
	hotfix-end = flow hotfix finish -Fpn

	start = "!gffs() { git flow feature start ${1}; }; gffs"
	finish = "!gfff() { git flow feature finish -F $(git-flow-current-branch); gfff}"
	hotfix = "!gfhs() { git flow hotfix start $1; }; gfhs"
	hotfix-finish = "!gfhf() { git fetch --tags; git pull origin master; git flow hotfix finish -F $(git-flow-current-branch); }; gfhf"
